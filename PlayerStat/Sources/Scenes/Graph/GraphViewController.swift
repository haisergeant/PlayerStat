//
//  GraphViewController.swift
//  PlayerStat
//
//  Created by Le Thanh Hai on 11/19/17.
//  Copyright (c) 2017 haile. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import EasyPeasy
import BonMot
import Charts

protocol GraphViewControllerInput {
    func display(viewModel: GraphViewModel)
}

protocol GraphViewControllerOutput {
    func load(request: GraphRequest)
}

class GraphViewController: BaseViewController, GraphViewControllerInput {
    var output: GraphViewControllerOutput!
    var router: GraphRouter!
    
    // MARK: - Object lifecycle
    let tableView = UITableView()
    
    var matches: [Match]!
    var result = [GraphSectionData]()
    init(matches: [Match]) {
        super.init()
        self.matches = matches
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func configureSubviews() {
        super.configureSubviews()
        self.view.addSubview(self.tableView)
        
        self.tableView.delegate = self
        self.tableView.dataSource = self
        self.tableView.rowHeight = UITableViewAutomaticDimension
        self.tableView.estimatedRowHeight = 140
        self.tableView.separatorStyle = .none
        self.tableView.allowsSelection = false
    }
    
    override func configureLayout() {
        super.configureLayout()
        self.tableView.easy.layout(
            Top().to(self.topLayoutGuide),
            Left(),
            Right(),
            Bottom()
        )
    }
    
    override func configureContent() {
        super.configureContent()
        self.output.load(request: GraphRequest(matches: self.matches))
    }
    
    func display(viewModel: GraphViewModel) {
        self.hideHUD()
        self.result = viewModel.list
        self.tableView.reloadData()
    }
    
    override func navigationTitle() -> String {
        return "Graph"
    }
    
    override func shouldShowNavigationBar() -> Bool {
        return true
    }
}

extension GraphViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerModel = result[section].headerModel
        let view = HeaderView()
        view.configure(model: headerModel)
        return view
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return result.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return result[section].graphList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let match = self.result[indexPath.section]
        let data = match.graphList
        var cell = UITableViewCell()
        if let item = data[indexPath.row] as? ChartModel {
            if item.data is PieChartData {
                let pieCell = tableView.dequeueReusableCell(withIdentifier: "AppPieChartCell") as? AppPieChartCell ?? AppPieChartCell()
                pieCell.configure(model: item)
                cell = pieCell
            } else if item.data is BarChartData {
                let barCell = tableView.dequeueReusableCell(withIdentifier: "AppBarChartCell") as? AppBarChartCell ?? AppBarChartCell()
                barCell.configure(model: item)
                cell = barCell
            }
        }
        return cell
    }
}
extension GraphViewController: UITableViewDelegate {
    
}
